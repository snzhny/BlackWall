import re
import subprocess
import pickle
import os
from bot_detector import process_log_line_for_bots
import sys
import sklearn.tree
from collections import defaultdict
from datetime import datetime, timedelta
from telegram_notifier import send_telegram_message
from attack_visualizer import update_attack_data
from urllib.parse import unquote

sys.modules['sklearn.tree.tree'] = sklearn.tree


MODEL_DIR = os.path.join("resources", "models")
with open(os.path.join(MODEL_DIR, "icmp_data.sav"), "rb") as f:
    icmp_model = pickle.load(f)
with open(os.path.join(MODEL_DIR, "tcp_syn_data.sav"), "rb") as f:
    tcp_syn_model = pickle.load(f)
with open(os.path.join(MODEL_DIR, "udp_data.sav"), "rb") as f:
    udp_model = pickle.load(f)

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
SQL_INJECTION_PATTERNS = [
    r"(union\s+select)",
    r"('|\")\s*(or|and)\s*\d+\s*=\s*\d+",
    r"(select\s+\*\s+from)"
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
ip_request_count = defaultdict(int)
ip_request_time = defaultdict(lambda: datetime.min)
MAX_REQUESTS_PER_MINUTE = 100  # –ü–æ—Ä–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –º–∏–Ω—É—Ç—É


def is_sql_injection(log_line):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ø—ã—Ç–∫—É SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏."""
    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL-–∫–æ–¥–∏—Ä–æ–≤–∫–∏
    decoded_line = unquote(log_line)
    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ –≤: {decoded_line}")
    for pattern in SQL_INJECTION_PATTERNS:
        if re.search(pattern, decoded_line, re.IGNORECASE):
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏: {pattern}")
            return True
    return False


def block_ip(ip):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç IP —á–µ—Ä–µ–∑ Windows Firewall (–≤—Ö–æ–¥—è—â–∏–π –∏ –∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫)."""
    print(f"üö® –ü–æ–ø—ã—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP: {ip}")

    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        subprocess.run(["netsh", "advfirewall", "firewall", "delete", "rule", f"name=BlockIP_{ip}"], check=False)
        subprocess.run(["netsh", "advfirewall", "firewall", "delete", "rule", f"name=BlockIP_{ip}_out"], check=False)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        result_in = subprocess.run(
            ["netsh", "advfirewall", "firewall", "add", "rule",
             f"name=BlockIP_{ip}", "dir=in", "action=block", f"remoteip={ip}"],
            check=True, capture_output=True, text=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        result_out = subprocess.run(
            ["netsh", "advfirewall", "firewall", "add", "rule",
             f"name=BlockIP_{ip}_out", "dir=out", "action=block", f"remoteip={ip}"],
            check=True, capture_output=True, text=True
        )

        print(f"‚úÖ IP {ip} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n{result_in.stdout}\n{result_out.stdout}")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP: {e}\n–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏: {e.stderr}")

def extract_features_for_model(log_line, protocol):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –≤ –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏.
    –ü—Ä–∏–º–µ—Ä: –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –∏ —Å—É–º–º–∞ —á–∏—Å–ª–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π IP.
    """
    ip = log_line.split()[0]
    length = len(log_line)
    digits = sum(c.isdigit() for c in log_line)
    ip_parts = ip.split(".")
    if len(ip_parts) == 4:
        ip_sum = sum(int(part) for part in ip_parts)
    else:
        ip_sum = 0
    return [length, digits, ip_sum]


def predict_ddos(log_line):
    log_line_lower = log_line.lower()
    features = extract_features_for_model(log_line, "generic")  # –ó–∞–ø—Ä–æ—Å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ª–æ–≥
    print(f"Debug: generic features = {features}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É

    if "icmp" in log_line_lower:
        prediction = icmp_model.predict([features])
    elif "tcp" in log_line_lower and "syn" in log_line_lower:
        prediction = tcp_syn_model.predict([features])
    elif "udp" in log_line_lower:
        prediction = udp_model.predict([features])
    else:
        prediction = [0]  # –ï—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∞—Ç–∞–∫–∏ –Ω–µ—Ç

    print(f"üìä ML Prediction: {prediction[0]}")
    return prediction[0]


def check_request_frequency(ip):
    global ip_request_count, ip_request_time

    current_time = datetime.now()
    time_diff = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏

    if ip in ip_request_time:
        time_diff = (current_time - ip_request_time[ip]).total_seconds()
        if time_diff < 60:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            ip_request_count[ip] += 1
        else:
            ip_request_count[ip] = 1  # –°–±—Ä–æ—Å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
    else:
        ip_request_count[ip] = 1
        ip_request_time[ip] = current_time

    print(f"Debug: {ip} -> {ip_request_count[ip]} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {time_diff:.2f} —Å–µ–∫")

    if ip_request_count[ip] > MAX_REQUESTS_PER_MINUTE:
        print(f"üî• DDoS-–∞—Ç–∞–∫–∞! IP {ip} –æ—Ç–ø—Ä–∞–≤–∏–ª {ip_request_count[ip]} –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return True
    return False


def process_log_line(server, log_line):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞:
      - –í—ã—è–≤–ª—è–µ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
      - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ML-–º–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è DDoS-–∞—Ç–∞–∫
      - –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞—Ç–∞–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç IP
      - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–æ–≤ –ø–æ User-Agent
      - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Å IP
    """
    parts = log_line.split()
    if len(parts) < 9:
        return  # –õ–æ–≥ –Ω–µ–ø–æ–ª–Ω—ã–π

    ip = parts[0]
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç—å –ª–æ–≥–∞, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–≤—ã—á–∫–∞—Ö, —Ç–æ —ç—Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞.
    request = " ".join(parts[5:8])
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏ –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π URL –∏–∑ –ª–æ–≥–∞
    attack_time = parts[3].lstrip('[')
    suspicious_url = parts[6]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞–µ–º —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º)
    if is_sql_injection(request):
        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –æ—Ç {ip} –≤ {attack_time} –ø–æ URL {suspicious_url}: {request}")
        block_ip(ip)
        message = f"üö® SQL-INJECTION! {ip} –≤ {attack_time}. URL: {suspicious_url}"
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {message}")  # <-- –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        send_telegram_message(message)
        update_attack_data(ip, "SQL Injection")
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ bot_detector)
    process_log_line_for_bots(log_line)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è DDoS
    prediction = predict_ddos(log_line)
    if prediction == 1:
        print(f"üî• ML: DDoS-–∞—Ç–∞–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç {ip} –≤ {attack_time} –ø–æ URL {suspicious_url}, –±–ª–æ–∫–∏—Ä—É–µ–º!")
        block_ip(ip)
        send_telegram_message(f"üö® DDoS-–∞—Ç–∞–∫–∞! –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç {ip} –≤ {attack_time}. URL: {suspicious_url}")
        update_attack_data(ip, "DDoS")  # ‚úÖ –ë–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    else:
        print(f"üìä –õ–æ–≥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ DDoS-–∞—Ç–∞–∫–∏ –æ—Ç {ip} –≤ {attack_time}. Prediction: {prediction}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
    if check_request_frequency(ip):
        print(f"üî• DDoS-–∞—Ç–∞–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç {ip} –≤ {attack_time} –ø–æ URL {suspicious_url}, –±–ª–æ–∫–∏—Ä—É–µ–º!")
        block_ip(ip)
        send_telegram_message(f"üö® DDoS-–∞—Ç–∞–∫–∞! –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç {ip} –≤ {attack_time}. URL: {suspicious_url}")
        update_attack_data(ip, "DDoS")  # ‚úÖ –ë–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
