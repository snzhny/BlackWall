import time
import os
import asyncio
import threading
from log_processor import process_log_line
from pystray import Icon, MenuItem, Menu
from PIL import Image
from attack_visualizer import run_visualization

def check_file_exists(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
    return os.path.exists(file_path)

def create_icon():
    """–°–æ–∑–¥–∞—ë—Ç –∏–∫–æ–Ω–∫—É –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ"""
    image = Image.open("resources/tray_icon.png")
    return Icon("LogMonitor", image, "Log Monitor", Menu(MenuItem("–í—ã—Ö–æ–¥", exit_program)))

def exit_program(icon, item):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    icon.stop()

async def tail_log(server, log_file):
    if not check_file_exists(log_file):
        print(f"‚ùå –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    print(f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: {log_file}")

    with open(log_file, "r", encoding="utf-8") as file:
        file.seek(0, os.SEEK_END)

        while True:
            line = file.readline()
            if line:
                print(f"üìú –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –ª–æ–≥–µ: {line.strip()}")
                await asyncio.to_thread(process_log_line, server, line.strip())
            else:
                await asyncio.sleep(0.1)  # –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è


def start_monitoring(server, log_file):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
    icon = create_icon()
    icon_thread = threading.Thread(target=icon.run)
    icon_thread.daemon = True
    icon_thread.start()

    # ‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ç–∞–∫
    run_visualization()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    asyncio.run(tail_log(server, log_file))