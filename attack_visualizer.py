import matplotlib.pyplot as plt
import matplotlib.animation as animation
import threading
import time
from collections import defaultdict
import json
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ç–∞–∫ –ø–æ IP –∏ —Ç–∏–ø–∞–º –∞—Ç–∞–∫
attack_data = defaultdict(lambda: defaultdict(int))
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫ –∏ —Ü–≤–µ—Ç–æ–≤
attack_colors = {}
# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
available_colors = ['red', 'blue', 'green', 'orange', 'purple', 'cyan', 'magenta', 'brown']

DATA_FILE = "attack_data.json"

def update_attack_data(ip, attack_type):
    global attack_data
    attack_data[ip][attack_type] += 1  # –¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥–µ—Ç!
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            try:
                data = json.load(f)
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Ç–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
                if not isinstance(data, dict):
                    data = {}
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
                data = {}
            attack_data = data
    else:
        attack_data = {}

    # –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å ‚Äì —Å–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å
    if ip not in attack_data or not isinstance(attack_data[ip], dict):
        attack_data[ip] = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
    if attack_type in attack_data[ip]:
        attack_data[ip][attack_type] += 1
    else:
        attack_data[ip][attack_type] = 1

    with open(DATA_FILE, "w") as f:
        json.dump(attack_data, f, indent=4)
    run_visualization()
    print(f"üî• –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {attack_data}")


def animate(i):
    plt.cla()  # –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞

    labels = []
    counts = []
    colors = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–µ—Ç–æ–∫, –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Ü–≤–µ—Ç–æ–≤
    for ip, attacks in attack_data.items():
        for attack_type, count in attacks.items():
            label = f"{ip} - {attack_type}"
            labels.append(label)
            counts.append(count)
            # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏ –µ—â–µ –Ω–µ—Ç –≤ attack_colors, –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–º—É —Ü–≤–µ—Ç
            if attack_type not in attack_colors:
                attack_colors[attack_type] = available_colors[len(attack_colors) % len(available_colors)]
            colors.append(attack_colors[attack_type])

    plt.barh(labels, counts, color=colors)
    plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫")
    plt.ylabel("IP –∏ —Ç–∏–ø –∞—Ç–∞–∫–∏")
    plt.title("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    plt.xticks(rotation=45)

def start_visualization():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≥—Ä–∞—Ñ–∏–∫–æ–º –∞—Ç–∞–∫."""
    print("üü¢ –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ç–∞–∫...")
    fig = plt.figure(figsize=(10, 6))
    ani = animation.FuncAnimation(fig, animate, interval=1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    while True:
        plt.pause(0.1)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

def run_visualization():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    vis_thread = threading.Thread(target=start_visualization, daemon=True)
    vis_thread.start()

if __name__ == "__main__":
    run_visualization()

    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    for i in range(5):
        update_attack_data("192.168.1.1", "DDoS")
        time.sleep(2)
        update_attack_data("192.168.1.1", "SQL Injection")
        time.sleep(2)
        update_attack_data("192.168.1.2", "Brute Force")
        time.sleep(2)
